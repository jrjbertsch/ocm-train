#! /usr/bin/bash

##################################################
# Generate an RSA public/private key pair
# Import the public key into AWS key pair servce
##################################################
function usage {
    echo "USAGE: aws-import-key [-h] [-d] <-n <key-name>> <-p <key-path>>" 
    echo "Required: <-n <key-name>> - Used to generate a named key"
    echo "Required: <-d <key-dir>> - The file-directory for the new RSA private-key file. The new"
    echo "          RSA public-key file-name uses the private-key file-name with a <.pub> extension." 
    echo "Optional: [-x]  - Dry run: Tests and confirms service connection -- no keys are imported."
    echo "Optional: [-h]  - Help."
    exit 1
}
if [[ ! $@ =~ ^\-.+ ]]; then
    usage
fi

while getopts ":hxn:d:" opt; do
  case ${opt} in
    n )
        keyName=$OPTARG 
        ;;
    d )
        keyDir=$OPTARG;
        ;;
    x )
        dryRunOpt=--dry-run
        ;;
    h )
	echo " aws-import-key accepts a key-name and key-path as arguments."
	echo " The key-name and key-path are used to generate an RSA Key Pair."
	echo " The public key is then sent to the AWS Key Pair Service."
	echo " It imports the public key into the associated account."  
	echo " "  
	usage
        ;;
    \? )
	usage
	;;
    : )
        echo "Invalid Option: -$OPTARG" 1>&2
	usage
      exit 1
	;;
	esac
done
shift $((OPTIND -1))

if [  -z "${keyName}" ]; then
	usage
fi
if [  -z "${keyDir}" ]; then
	usage
fi
keyPath="${keyDir}/${keyName}"
if [ ! -f "${keyPath}" ]; then
    ssh-keygen  -C "${keyName}" -f "${keyPath}" -N ''
else 
    echo "Warning: New key not generated: ${keyPath} already exists."
fi
if [ $? -ne 0 ];then
    exit
fi
read -r -p "Import key to AWS key pair service? [y/N] " response
case "$response" in
    [yY][eE][sS]|[yY]) 
	;;
    *)
	exit 1
	;;        
esac
aws ec2 import-key-pair "${dryRunOpt}" --key-name "${keyName}.pub" --public-key-material "fileb://${keyPath}.pub"
